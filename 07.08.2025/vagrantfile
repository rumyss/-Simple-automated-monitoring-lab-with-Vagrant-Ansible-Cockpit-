require 'etc'

def get_subnet
  user = Etc.getlogin
  if Process.uid == 0
    output = `ip -4 addr show virbr0 | grep -oP '(?<=inet\\s)\\d+(\\.\\d+){3}'`.strip
  else
    output = `ip -4 addr show $(ip route show default | awk '/default/ {print $5}') | grep -oP '(?<=inet\\s)\\d+(\\.\\d+){3}'`.strip
  end
  output.split('.')[0..2].join('.')
end

subnet = get_subnet
ansible_ip = "#{subnet}.10"
client_ip  = "#{subnet}.225"

Vagrant.configure("2") do |config|
  config.vm.synced_folder ".", "/vagrant_data", type: "rsync"

  config.vm.define "client" do |client|
    client.vm.box = "generic/ubuntu2204"
    client.vm.hostname = "client"
    client.vm.network "private_network", ip: client_ip
  end

  config.vm.define "ansible" do |ansible|
    ansible.vm.box = "generic/ubuntu2204"
    ansible.vm.hostname = "ansible"
    ansible.vm.network "private_network", ip: ansible_ip

    # Trigger: Start client before ansible
    ansible.trigger.before :up do |trigger|
      trigger.info = "Starting client VM first (before ansible up)..."
      trigger.run = {inline: "vagrant up client"}
    end

    # Trigger: After ansible up, run Cockpit playbook
    ansible.trigger.after :up do |trigger|
      trigger.info = "Running Cockpit playbook automatically (after ansible up)..."
      trigger.run = {inline: "vagrant ssh ansible -c 'ansible-playbook /vagrant_data/cockpit.yml -i /vagrant_data/hosts.ini'"}
    end
  end
end
